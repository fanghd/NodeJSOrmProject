// **********************************************************************
// Parsed By TodoParser(1.1.0), Generated By tools(20180620)
// TodoParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "Recv.todo" by Structure Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
// var TodoStream = require("@todo/stream");
var TodoStream = require("../../../../../todolib/stream/todo");

var BEC = BEC || {};
module.exports.BEC = BEC;

BEC.TestReq = function() {
    this.sBuf = "";
    this._classname = "BEC.TestReq";
};
BEC.TestReq._classname = "BEC.TestReq";
BEC.TestReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
BEC.TestReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
BEC.TestReq._readFrom = function (is) {
    var tmp = new BEC.TestReq();
    tmp.sBuf = is.readString(0, false, "");
    return tmp;
};
BEC.TestReq.prototype._writeTo = function (os) {
    os.writeString(0, this.sBuf);
};
BEC.TestReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
BEC.TestReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
BEC.TestReq.prototype.toObject = function() { 
    return {
        "sBuf" : this.sBuf
    };
};
var __todo_AdminReg$addTaskReq$EN = function (taskReq) {
    var os = new TodoStream.TodoOutputStream();
    os.writeStruct(1, taskReq);
    return os.getBinBuffer();
};

var __todo_AdminReg$addTaskReq$DE = function (data) {
    try {
        var is = new TodoStream.TodoInputStream(data.response.sBuffer);
        return {
            "request": data.request,
            "response": {
                "costtime": data.request.costtime,
                "return": is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request": data.request,
            "response": {
                "costtime": data.request.costtime,
                "error": {
                    "code": TodoError.CLIENT.DECODE_ERROR,
                    "message": e.message
                }
            }
        };
    }
};

var __todo_AdminReg$addTaskReq$ER = function (data) {
    throw {
        "request": data.request,
        "response": {
            "costtime": data.request.costtime,
            "error": data.error
        }
    }
};
BEC.TestReq.prototype.addTaskReq = function (taskReq) {
    return this._worker.todo_invoke("test", __todo_AdminReg$addTaskReq$EN(taskReq), arguments[arguments.length - 1])
    .then(__todo_AdminReg$addTaskReq$DE, __todo_AdminReg$addTaskReq$ER);
};
BEC.TestReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sBuf") && (this.sBuf = json.sBuf);
};
BEC.TestReq.prototype.toBinBuffer = function () {
    var os = new TodoStream.TodoOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
BEC.TestReq.new = function () {
    return new BEC.TestReq();
};
BEC.TestReq.create = function (is) {
    return BEC.TestReq._readFrom(is);
};

BEC.TestRsp = function() {
    this.sBuf = "";
    this._classname = "BEC.TestRsp";
};
BEC.TestRsp._classname = "BEC.TestRsp";
BEC.TestRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
BEC.TestRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
BEC.TestRsp._readFrom = function (is) {
    var tmp = new BEC.TestRsp();
    tmp.sBuf = is.readString(0, false, "");
    return tmp;
};
BEC.TestRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.sBuf);
};
BEC.TestRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
BEC.TestRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
BEC.TestRsp.prototype.toObject = function() { 
    return {
        "sBuf" : this.sBuf
    };
};
BEC.TestRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sBuf") && (this.sBuf = json.sBuf);
};
BEC.TestRsp.prototype.toBinBuffer = function () {
    var os = new TodoStream.TodoOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
BEC.TestRsp.new = function () {
    return new BEC.TestRsp();
};
BEC.TestRsp.create = function (is) {
    return BEC.TestRsp._readFrom(is);
};



